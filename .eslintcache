[{"/Users/marc/Workspace/my_projects/flulse/src/App.jsx":"1","/Users/marc/Workspace/my_projects/flulse/src/components/FilterBar.jsx":"2","/Users/marc/Workspace/my_projects/flulse/src/components/FilterBar.test.js":"3","/Users/marc/Workspace/my_projects/flulse/src/components/Photo.jsx":"4","/Users/marc/Workspace/my_projects/flulse/src/components/Photo.test.jsx":"5","/Users/marc/Workspace/my_projects/flulse/src/index.js":"6","/Users/marc/Workspace/my_projects/flulse/src/serviceWorker.js":"7","/Users/marc/Workspace/my_projects/flulse/src/store.js":"8","/Users/marc/Workspace/my_projects/flulse/src/App.test.jsx":"9"},{"size":4340,"mtime":1585378492549,"results":"10","hashOfConfig":"11"},{"size":156,"mtime":1585377657437,"results":"12","hashOfConfig":"11"},{"size":84,"mtime":1585377685594,"results":"13","hashOfConfig":"11"},{"size":375,"mtime":1585378050639,"results":"14","hashOfConfig":"11"},{"size":352,"mtime":1585378076139,"results":"15","hashOfConfig":"11"},{"size":621,"mtime":1585378624265,"results":"16","hashOfConfig":"11"},{"size":5073,"mtime":1585378667554,"results":"17","hashOfConfig":"11"},{"size":113,"mtime":1585371886865,"results":"18","hashOfConfig":"11"},{"size":2522,"mtime":1585378534174,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qp33es",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"/Users/marc/Workspace/my_projects/flulse/src/App.jsx",[],"/Users/marc/Workspace/my_projects/flulse/src/components/FilterBar.jsx",[],"/Users/marc/Workspace/my_projects/flulse/src/components/FilterBar.test.js",[],"/Users/marc/Workspace/my_projects/flulse/src/components/Photo.jsx",[],"/Users/marc/Workspace/my_projects/flulse/src/components/Photo.test.jsx",["41"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Photo from './Photo';\n\n// TODO:\n\n// - test whether the passed props will\n//   actually output a proper Photo component\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<Photo />, div);\n  ReactDOM.unmountComponentAtNode(div);\n});\n","/Users/marc/Workspace/my_projects/flulse/src/index.js",[],"/Users/marc/Workspace/my_projects/flulse/src/serviceWorker.js",["42","43","44","45","46"],"/* eslint-disable no-use-before-define */\n/* eslint-disable lines-around-comment */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n\n        if (installingWorker == null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","/Users/marc/Workspace/my_projects/flulse/src/store.js",[],"/Users/marc/Workspace/my_projects/flulse/src/App.test.jsx",["47"],"/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { render, cleanup } from '@testing-library/react';\n\nimport App from './App';\n\nafterEach(cleanup);\n\n// TODO:\n// 1) Pass the mock data to the Photo component\n// 2) When search is submitted, the display should output photos properly\n\nit('renders without crashing', () => {\n  const { getByText, getByTestId, container, asFragment } = render(<App />);\n\n  const photos = jest.fn(() => {\n    return {\n      photos: {\n        page: 1,\n        pages: 93,\n        perpage: 6,\n        total: '557',\n        photo: [\n          {\n            id: '48077073123',\n            owner: '25872797@N02',\n            secret: 'db8392063e',\n            server: '65535',\n            farm: 66,\n            title: 'Pitcher plant (Nepenthes argentii)',\n            ispublic: 1,\n            isfriend: 0,\n            isfamily: 0,\n          },\n          {\n            id: '48058937143',\n            owner: '25872797@N02',\n            secret: '53f02bbccf',\n            server: '65535',\n            farm: 66,\n            title: 'Steep rainforest-clad slopes',\n            ispublic: 1,\n            isfriend: 0,\n            isfamily: 0,\n          },\n          {\n            id: '48058924053',\n            owner: '25872797@N02',\n            secret: 'cca01d37c1',\n            server: '65535',\n            farm: 66,\n            title: 'Steep slopes of Mt. Guiting-guiting',\n            ispublic: 1,\n            isfriend: 0,\n            isfamily: 0,\n          },\n          {\n            id: '48058969892',\n            owner: '25872797@N02',\n            secret: '67c42137b7',\n            server: '65535',\n            farm: 66,\n            title: 'Nepenthes sibuyanensis',\n            ispublic: 1,\n            isfriend: 0,\n            isfamily: 0,\n          },\n          {\n            id: '47700590322',\n            owner: '32707992@N04',\n            secret: '69067470f2',\n            server: '65535',\n            farm: 66,\n            title: 'leaving Sibuyan Island',\n            ispublic: 1,\n            isfriend: 0,\n            isfamily: 0,\n          },\n          {\n            id: '46914154291',\n            owner: '144206081@N03',\n            secret: '6f4aaf2940',\n            server: '4811',\n            farm: 5,\n            title: 'Indigo Banded Kingfisher',\n            ispublic: 1,\n            isfriend: 0,\n            isfamily: 0,\n          },\n        ],\n      },\n      stat: 'ok',\n    };\n  });\n\n  expect(getByTestId('app-main')).toBeDefined();\n});\n",{"ruleId":"48","severity":1,"message":"49","line":6,"column":1,"nodeType":"50","endLine":6,"endColumn":9},{"ruleId":"51","severity":1,"message":"52","line":45,"column":11,"nodeType":"53","messageId":"54","endLine":45,"endColumn":22},{"ruleId":"51","severity":1,"message":"52","line":76,"column":15,"nodeType":"53","messageId":"54","endLine":76,"endColumn":26},{"ruleId":"51","severity":1,"message":"52","line":89,"column":15,"nodeType":"53","messageId":"54","endLine":89,"endColumn":26},{"ruleId":"51","severity":1,"message":"52","line":101,"column":7,"nodeType":"53","messageId":"54","endLine":101,"endColumn":20},{"ruleId":"51","severity":1,"message":"52","line":128,"column":7,"nodeType":"53","messageId":"54","endLine":128,"endColumn":18},{"ruleId":"48","severity":1,"message":"49","line":10,"column":1,"nodeType":"50","endLine":10,"endColumn":9},"no-warning-comments","Unexpected 'todo' comment.","Line","no-console","Unexpected console statement.","MemberExpression","unexpected"]