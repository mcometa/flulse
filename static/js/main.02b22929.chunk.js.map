{"version":3,"sources":["components/Photo.js","components/FilterBar.js","App.js","serviceWorker.js","index.js"],"names":["Photo","react_default","a","createElement","id","this","props","className","src","url","alt","title","React","Component","FilterBar","show","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleFilterClick","e","preventDefault","console","log","setState","filterbar","state","photos","tag","handleSearch","bind","assertThisInitialized","_this2","method","fetch","concat","process","then","data","json","photosArray","photo","map","imgurl","farm","server","secret","src_components_Photo","key","_this3","target","value","keyCode","_this4","type","defaultValue","placeholder","onKeyDown","href","onClick","components_FilterBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02b22929.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Photo.css\";\n\nclass Photo extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n  render() {\n    return (\n      <article id={this.props.id} className=\"photo-item\">\n        <img src={this.props.url} alt={this.props.title} />\n      </article>\n    );\n  }\n}\n\nexport default Photo;\n","import React from \"react\";\n\nclass FilterBar extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  render() {\n    if (!this.props.show) {\n      return null;\n    } else {\n      return <div>Filter bar</div>;\n    }\n  }\n}\n\nexport default FilterBar;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Photo from \"./components/Photo\";\nimport FilterBar from \"./components/FilterBar\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      photos: [],\n      tag: \"sibuyan island\",\n      filterbar: false\n    };\n\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleFilterClick = this.handleFilterClick.bind(this);\n  }\n\n  componentDidMount() {\n    let method = this.state.tag\n      ? \"flickr.photos.search\"\n      : \"flickr.photos.getRecent\";\n    fetch(\n      `${process.env.REACT_APP_FLICKR_API_BASE}?method=${method}&api_key=${\n        process.env.REACT_APP_FLICKR_API_KEY\n      }&per_page=6&page=1&text=${this.state.tag}&format=json&nojsoncallback=1&`\n    )\n      .then(data => {\n        return data.json();\n      })\n      .then(data => {\n        // https://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpg\n        // or\n        // https://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}_[mstzb].jpg\n        // or\n        // https://farm{farm-id}.staticflickr.com/{server-id}/{id}_{o-secret}_o.(jpg|gif|png)\n        let photosArray = data.photos.photo.map(photo => {\n          let imgurl = `https://farm${photo.farm}.staticflickr.com/${\n            photo.server\n          }/${photo.id}_${photo.secret}.jpg`;\n\n          return (\n            <Photo\n              key={photo.id}\n              id={photo.id}\n              url={imgurl}\n              title={photo.title}\n            />\n          );\n        });\n\n        this.setState({\n          photos: photosArray\n        });\n      });\n  }\n\n  handleSearch(e) {\n    let method = e.target.value\n      ? \"flickr.photos.search\"\n      : \"flickr.photos.getRecent\";\n\n    if (e.keyCode === 13) {\n      fetch(\n        `${process.env.REACT_APP_FLICKR_API_BASE}?method=${method}&api_key=${\n          process.env.REACT_APP_FLICKR_API_KEY\n        }&safe_search=1&per_page=6&page=1&text=${\n          e.target.value\n        }&format=json&nojsoncallback=1&`\n      )\n        .then(data => {\n          return data.json();\n        })\n        .then(data => {\n          // https://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}.jpg\n          // or\n          // https://farm{farm-id}.staticflickr.com/{server-id}/{id}_{secret}_[mstzb].jpg\n          // or\n          // https://farm{farm-id}.staticflickr.com/{server-id}/{id}_{o-secret}_o.(jpg|gif|png)\n          let photosArray = data.photos.photo.map(photo => {\n            let imgurl = `https://farm${photo.farm}.staticflickr.com/${\n              photo.server\n            }/${photo.id}_${photo.secret}.jpg`;\n\n            return (\n              <Photo\n                key={photo.id}\n                id={photo.id}\n                url={imgurl}\n                title={photo.title}\n              />\n            );\n          });\n\n          this.setState({\n            photos: photosArray\n          });\n        });\n    }\n  }\n  handleFilterClick = e => {\n    e.preventDefault();\n\n    console.log(\"filter click\");\n\n    this.setState({\n      filterbar: !this.state.filterbar\n    });\n  };\n\n  render() {\n    let filterbar = this.state.filterbar;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2 className=\"logoText\">\n            {\" \"}\n            Flulse\n            <br />\n            <small>by mcometa</small>{\" \"}\n          </h2>{\" \"}\n          <div className=\"toolbar-search\">\n            <input\n              type=\"text\"\n              defaultValue={this.state.tag}\n              className=\"searchbox\"\n              placeholder=\"Search then press enter...\"\n              onKeyDown={e => this.handleSearch(e)}\n            />{\" \"}\n          </div>{\" \"}\n          <div className=\"toolbar-filter\">\n            <a href=\"#\" className=\"filter-btn\" onClick={this.handleFilterClick}>\n              Filter\n            </a>\n          </div>\n        </header>{\" \"}\n        <FilterBar show={this.state.filterbar} />\n        <main className=\"Main-container\">{this.state.photos} </main>\n        <footer className=\"App-footer\">\n          <p> hello 2019! </p>{\" \"}\n        </footer>{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}